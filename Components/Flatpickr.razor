@using Microsoft.JSInterop
@using System.Text.Json
@using System.Text.Json.Serialization
@using FlatpickrBlazor
@inject IJSRuntime JSRuntime
@implements IFlatpickrOptions

@if (String.IsNullOrWhiteSpace(CustomInputId))
{
    @if (Options != null && Options.Wrap)
    {
        <div @ref="container" class="@WrapperCssClass">
            @BeforeInputChilds
            <input type="text" data-input="@Options.Wrap" @attributes="Attributes"/>
            @AfterInputChilds
        </div>
    }
    else {
        <input type="text" @ref="container" @attributes="Attributes"/>
    }
}

@code {
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> Attributes { get; set; }

    [Parameter]
    public string WrapperCssClass { get; set; }

    [Parameter]
    public RenderFragment BeforeInputChilds { get; set; }

    [Parameter]
    public RenderFragment AfterInputChilds { get; set; }

    [Parameter]
    public FlatpickrOptions Options { get; set; } = new FlatpickrOptions();

    [Parameter]
    public FlatpickrPluginOptions PluginOptions { get; set; } = new FlatpickrPluginOptions();

    [Parameter]
    public Action<List<DateTimeOffset>> OnChange { get; set; } = null;

    [Parameter]
    public Action OnCreate { get; set; } = null;

    [Parameter]
    public string CustomInputId { get; set; }

    #region Options

    [Parameter]
    public string DateFormat {
        get => Options.DateFormat;
        set => Options.DateFormat = value;
    }

    [Parameter]
    public bool Inline {
        get => Options.Inline;
        set => Options.Inline = value;
    }

    [Parameter]
    public bool NoCalendar {
        get => Options.NoCalendar;
        set => Options.NoCalendar = value;
    }

    [Parameter]
    public bool EnableTime {
        get => Options.EnableTime;
        set => Options.EnableTime = value;
    }

    [Parameter]
    public bool Time24Hours {
        get => Options.Time24Hours;
        set => Options.Time24Hours = value;
    }

    [Parameter]
    public bool WeekNumbers {
        get => Options.WeekNumbers;
        set => Options.WeekNumbers = value;
    }

    [Parameter]
    public string Locale {
        get => Options.Locale;
        set => Options.Locale = value;
    }

    [Parameter]
    public DateTimeOffset? MinDate {
        get => Options.MinDate;
        set => Options.MinDate = value;
    }

    [Parameter]
    public bool ParseMinDate {
        get => Options.ParseMinDate;
        set => Options.ParseMinDate = value;
    }

    [Parameter]
    public DateTimeOffset? MaxDate {
        get => Options.MaxDate;
        set => Options.MaxDate = value;
    }

    [Parameter]
    public bool ParseMaxDate {
        get => Options.ParseMaxDate;
        set => Options.ParseMaxDate = value;
    }

    [Parameter]
    public int HourIncrement {
        get => Options.HourIncrement;
        set => Options.HourIncrement = value;
    }

    [Parameter]
    public int MinuteIncrement {
        get => Options.MinuteIncrement;
        set => Options.MinuteIncrement = value;
    }

    // FIXME: can array be used as a parameter?
    [Parameter]
    public List<string> DefaultDate {
        get => Options.DefaultDate;
        set => Options.DefaultDate = value;
    }

    [Parameter]
    public FlatpickrOptionsMode Mode {
        get => Options.Mode;
        set => Options.Mode = value;
    }

    [Parameter]
    public bool Wrap {
        get => Options.Wrap;
        set => Options.Wrap = value;
    }

    #endregion

    private FlatpickrJsHelper jsHelper;

    private ElementReference container;

    private object InputReference => String.IsNullOrWhiteSpace(CustomInputId) ? (object) container : CustomInputId;

    protected override void OnParametersSet()
    {
        jsHelper = new FlatpickrJsHelper(OnChange, OnCreate);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            string optionsStr = JsonSerializer.Serialize(Options, new JsonSerializerOptions
            {
                IgnoreNullValues = true,
                Converters = { new JsonStringEnumConverter(JsonNamingPolicy.CamelCase, false) }
            });
            string pluginStr = JsonSerializer.Serialize(PluginOptions, new JsonSerializerOptions
            {
                IgnoreNullValues = false,
                Converters = { new JsonStringEnumConverter(JsonNamingPolicy.CamelCase, false)}
            });
            await JSRuntime.InvokeVoidAsync(
                "flatpickrblazor.create", InputReference, optionsStr, pluginStr, DotNetObjectReference.Create(jsHelper));
        }
    }

    public async Task<List<DateTimeOffset>> GetSelectedDatesAsync()
    {
        return await JSRuntime.InvokeAsync<List<DateTimeOffset>>("flatpickrblazor.selectedDates", InputReference);
    }

    public List<DateTimeOffset> GetSelectedDates()
    {
        return jsHelper.DateTimes;
    }

    public async Task SetDateAsync(DateTimeOffset date, bool triggerChange = false)
    {
        await JSRuntime.InvokeVoidAsync(
                "flatpickrblazor.setDate", InputReference, date, triggerChange, null);
    }

    public async Task SetDateAsync(List<DateTimeOffset> dates, bool triggerChange = false)
    {
        await JSRuntime.InvokeVoidAsync(
                "flatpickrblazor.setDates", InputReference, dates, triggerChange, null);
    }

    public async Task SetDateAsync(DateTimeOffset date, bool triggerChange, string dateStrFormat)
    {
        await JSRuntime.InvokeVoidAsync(
                "flatpickrblazor.setDate", InputReference, date, triggerChange, dateStrFormat);
    }

    public async Task ClearAsync()
    {
        await JSRuntime.InvokeVoidAsync("flatpickrblazor.clear", InputReference);
    }
}
